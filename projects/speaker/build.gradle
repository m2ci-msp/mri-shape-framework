// create tasks for subprojects
subprojects { subproject ->
    // get right configuration for the subproject
    def config = rootProject.ext.configMap["$subproject.name"]

    task initPalate {
        description = "Creates initial data for palate reconstruction."

        def speaker = config.speaker.name
        def scan = config.speaker.palateScan
        def dataset = config.speaker.dataset
        def basePath = config.speaker.basePath
        def scanPath = "$basePath/$scan/"

        def palateMesh = file("$rootProject.buildDir/$scanPath/matchPalate/tracking_org_result0.ply")
        def procrustesPalateMesh = file("$rootProject.buildDir/$scanPath/procrustesPalate/procrustes.ply")
        def palateScan = file("$rootProject.buildDir/$scanPath/smooth/scan.json")
        def destDir = file("$rootProject.buildDir/$basePath/palate")

        // task depends on the matchPalate and smooth tasks
        def matchPalate = ":projects:palate:$dataset.name-$speaker-$scan:matchPalate"
        def smooth = ":projects:shared:$dataset.name-$speaker-$scan:smooth"
        def procrustesPalates = ":projects:meta:$dataset.name:createProcrustesPalates"

        def bootstrapPalate = rootProject.ext.configMap["$dataset.name"].bootstrapPalate

        // use bootstrapped palate if bootstrapping is active
        if( bootstrapPalate.active ) {

            def selectedIteration = bootstrapPalate.selectedIteration
            matchPalate = ":projects:bootstrapPalate:subtasks:$selectedIteration-$dataset.name-$speaker-$scan:matchPalate"
            procrustesPalates = ":projects:bootstrapPalate:main:$selectedIteration-$dataset.name:createProcrustesPalates"
            palateMesh = file("$rootProject.buildDir/$dataset.name/bootstrapPalate/$selectedIteration/$speaker/$scan/matchPalate/tracking_org_result0.ply")
            procrustesPalateMesh = file("$rootProject.buildDir/$dataset.name/bootstrapPalate/$selectedIteration/$speaker/$scan/procrustesPalate/procrustes.ply")
        }

        dependsOn matchPalate
        dependsOn procrustesPalates
        dependsOn smooth

        inputs.files palateMesh, procrustesPalateMesh, palateScan
        outputs.dir destDir

        doLast{
            destDir.mkdirs()

            copy{
                from inputs.files
                into destDir
            }
        }
    }

    task estimateTongueThreshold {

        def dataset = config.speaker.dataset
        def speaker = config.speaker.name
        def scanPath = config.speaker.scanPath

        def phonemesFile = file("$rootProject.rootDir/configuration/$dataset.name/database.json")
        def slurper = new groovy.json.JsonSlurper()
        def phonemes = slurper.parse(phonemesFile)

        def outputFile = file("$rootProject.buildDir/$dataset.name/$speaker/estimateTongueThreshold/threshold.json")

        phonemes.findAll{it.missing == false && it.speaker == speaker}.each{

            def basePath = "$dataset.name/$it.speaker/$it.id"
            dependsOn ":projects:shared:$dataset.name-$it.speaker-$it.id:cropToVocalTract"
            inputs.file file("$rootProject.buildDir/$basePath/cropToVocalTract/vocaltract.json")
            inputs.file file("$landmarksTongueDir/$basePath/landmarks.json")

        }

        outputs.file outputFile

        doLast{

            outputFile.parentFile.mkdirs()

            def scans = []
            def landmarks = []
            phonemes.findAll{it.missing == false && it.speaker == speaker}.each{

                def basePath = "$dataset.name/$it.speaker/$it.id"
                scans.add(file("$rootProject.buildDir/$basePath/cropToVocalTract/vocaltract.json"))
                landmarks.add(file("$landmarksTongueDir/$basePath/landmarks.json"))

            }

            def cmd = "estimate-threshold-with-landmarks --images ${scans.join(' ')} --landmarks ${landmarks.join(' ')} --scale_to_8bit --output $outputFile"

            exec{

                commandLine cmd.tokenize()
                workingDir rootProject.buildDir

            }

        }

    }

}
